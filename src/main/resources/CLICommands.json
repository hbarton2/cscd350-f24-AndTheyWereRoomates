{
  "commands": {
    "classCommands": {
      "create": {
        "syntax": "create class <classname>",
        "description": "Creates a new class and sets it as the current class for quick-editing.",
        "example": "create class Car",
        "errors": {
          "classExists": [
            "Error: Class <classname> already exists.",
            "Hint: Use 'rename class <existing classname> <new classname>' if you want to rename it."
          ],
          "invalidName": [
            "Error: <classname> is an invalid class name.",
            "Hint: Class names must start with a letter and contain only letters, numbers, or underscores."
          ],
          "emptyName": [
            "Error: Class name cannot be empty.",
            "Suggestion: Provide a valid class name after 'create class'."
          ]
        }
      },
      "remove": {
        "syntax": "remove class <classname>",
        "description": "Removes an existing class.",
        "example": "remove class Car",
        "errors": {
          "classNotFound": [
            "Error: Class <classname> does not exist.",
            "Suggestion: Check for typos or list all classes using 'list all class'."
          ],
          "classInUse": [
            "Error: Class <classname> is currently set and cannot be removed.",
            "Action: Switch to another class using 'switch <classname>' before removing."
          ]
        }
      },
      "rename": {
        "syntax": "rename class <existing classname> <new classname>",
        "description": "Renames an existing class.",
        "example": "rename class Car Vehicle",
        "errors": {
          "classNotFound": [
            "Error: Class <existing classname> does not exist.",
            "Hint: Use 'list all class' to see all existing classes."
          ],
          "classExists": [
            "Error: Class <new classname> already exists.",
            "Suggestion: Choose a different name to avoid duplication."
          ],
          "invalidName": [
            "Error: <new classname> is an invalid class name.",
            "Hint: Class names must start with a letter and contain only valid characters."
          ]
        }
      },
      "switch": {
        "syntax": "switch <existing classname>",
        "description": "Sets an existing class as the current class for quick-editing.",
        "example": "switch Car",
        "errors": {
          "classNotFound": [
            "Error: Class <classname> does not exist.",
            "Suggestion: Check spelling or list all classes with 'list all class'."
          ]
        }
      },
      "listClasses": {
        "syntax": "list classes",
        "description": "Lists the names of all currently created classes without additional details.",
        "example": "list classes",
        "errors": {
          "noClasses": [
            "Error: No classes have been created yet.",
            "Suggestion: Use 'create class <classname>' to add a new class."
          ]
        }
      }
    },
    "fieldCommands": {
      "add": {
        "syntax": "add field <fieldtype> <fieldname>",
        "description": "Adds a field to the currently set class.",
        "example": "add field String exampleField",
        "errors": {
          "classNotSet": [
            "Error: No class is currently set. Use 'switch <classname>' first."
          ],
          "fieldExists": [
            "Error: Field <fieldname> already exists in the class.",
            "Suggestion: Rename the field or delete the existing one."
          ],
          "invalidType": [
            "Error: <fieldtype> is not a recognized type.",
            "Supported types: int, double, string, boolean, etc."
          ]
        }
      },
      "remove": {
        "syntax": "remove field <fieldname>",
        "description": "Removes a field from the currently set class.",
        "example": "remove field exampleField",
        "errors": {
          "classNotSet": [
            "Error: No class is currently set. Use 'switch <classname>' first."
          ],
          "fieldNotFound": [
            "Error: Field <fieldname> does not exist in the class.",
            "Suggestion: Verify the field name or add it first."
          ]
        }
      },
      "rename": {
        "syntax": "rename field <existing fieldname> <new fieldname>",
        "description": "Renames a field in the currently set class.",
        "example": "rename field exampleField newFieldName",
        "errors": {
          "classNotSet": [
            "Error: No class is currently set. Use 'switch <classname>' first."
          ],
          "fieldNotFound": [
            "Error: Field <existing fieldname> does not exist in the class.",
            "Suggestion: Verify the field name or add it first."
          ]
        }
      }
    },
    "methodCommands": {
      "add": {
        "syntax": "add method <returntype> <methodname> [<parametertype> <parametername> ...]",
        "description": "Adds a method with specified parameters to the currently set class. Supports method overloading.",
        "example": "add method void exampleMethod int param1, String param2",
        "errors": {
          "methodExists": [
            "Error: Method <methodname> with the specified parameters already exists in the class.",
            "Suggestion: Use unique parameter types or names to create an overloaded method."
          ],
          "invalidType": [
            "Error: <parametertype> is not a recognized type.",
            "Supported types: int, double, string, boolean, etc."
          ]
        }
      },
      "remove": {
        "syntax": "remove method <methodname> [<parametertype> <parametername> ...]",
        "description": "Removes a method, optionally with specific parameters, from the currently set class.",
        "example": "remove method exampleMethod int param1, String param2",
        "errors": {
          "methodNotFound": [
            "Error: Method <methodname> with the specified parameters does not exist in the class.",
            "Suggestion: Verify the method signature."
          ]
        }
      },
      "rename": {
        "syntax": "rename method <existing methodname> <new methodname> <returntype>",
        "description": "Renames a method in the currently set class.",
        "example": "rename method exampleMethod newMethodName void",
        "errors": {
          "methodNotFound": [
            "Error: Method <existing methodname> does not exist in the class.",
            "Suggestion: Verify the method name or add it first."
          ]
        }
      }
    },
    "parameterCommands": {
      "add": {
        "syntax": "add parameter <methodname> <parametertype> <parametername> [<parametertype> <parametername> ...]",
        "description": "Adds one or more parameters to a specified method in the currently set class.",
        "example": "add parameter exampleMethod int param1, String param2",
        "errors": {
          "methodNotFound": [
            "Error: Method <methodname> does not exist in the class.",
            "Suggestion: Check if the method is already defined."
          ],
          "parameterExists": [
            "Error: Parameter <parametername> already exists in the specified method.",
            "Suggestion: Use a different parameter name."
          ]
        }
      },
      "remove": {
        "syntax": "remove parameter <methodname> <parametername> [<parametername> ...]",
        "description": "Removes one or more parameters from a specified method in the currently set class.",
        "example": "remove parameter exampleMethod param1 param2",
        "errors": {
          "parameterNotFound": [
            "Error: Parameter <parametername> not found in method <methodname>.",
            "Suggestion: Verify the parameter name and method."
          ]
        }
      }
    },
    "relationshipCommands": {
      "add": {
        "syntax": "add relationship <relationshiptype> <targetclassname>",
        "description": "Adds a relationship between the current class and a target class.",
        "example": "add relationship association AssociatedClass",
        "errors": {
          "relationshipExists": [
            "Error: Relationship of type <relationshiptype> with <targetclassname> already exists.",
            "Suggestion: Use a different relationship type or remove the existing one first."
          ]
        }
      },
      "remove": {
        "syntax": "remove relationship <relationshiptype> <targetclassname>",
        "description": "Removes a relationship between the current class and a target class.",
        "example": "remove relationship association AssociatedClass",
        "errors": {
          "relationshipNotFound": [
            "Error: Relationship <relationshiptype> with <targetclassname> not found.",
            "Suggestion: Verify the relationship type and target class."
          ]
        }
      }
    },
    "miscCommands": {
      "save": {
        "syntax": "save",
        "description": "Saves the current project to a JSON file.",
        "example": "save",
        "errors": {
          "saveFailed": [
            "Error: Could not save the project.",
            "Suggestion: Check file permissions or try a different file name."
          ]
        }
      },
      "load": {
        "syntax": "load",
        "description": "Loads a project from a JSON file.",
        "example": "load",
        "errors": {
          "loadFailed": [
            "Error: Could not load the project. File may be missing or corrupted.",
            "Suggestion: Verify the file path and format."
          ]
        }
      },
      "undo": {
        "syntax": "undo",
        "description": "Undoes the most recent action.",
        "example": "undo",
        "errors": {
          "noUndo": [
            "Error: No actions to undo.",
            "Suggestion: Perform an action first, then try undoing."
          ]
        }
      },
      "redo": {
        "syntax": "redo",
        "description": "Redoes the most recent undone action.",
        "example": "redo",
        "errors": {
          "noRedo": [
            "Error: No actions to redo.",
            "Suggestion: Use undo first, then redo."
          ]
        }
      },
      "help": {
        "syntax": "help",
        "description": "Displays a list of available commands or details for a specific command.",
        "example": "help create",
        "errors": {
          "commandNotFound": [
            "Error: The specified command does not exist.",
            "Suggestion: Enter 'help' to view a list of all commands."
          ]
        }
      },
      "exit": {
        "syntax": "exit",
        "description": "Terminates the application.",
        "example": "exit",
        "errors": {}
      }
    }
  }
}
