name: Java Continuous Integration with Maven (GraalVM)

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        java-version: [ '21.0.5' ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up GraalVM JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'graalvm'
          cache: maven

      - name: Verify Code Style with Spotless
        run: |
          mvn spotless:check || echo "Spotless check failed. Proceeding with the build."
      - name: Apply Code Style if Needed
        if: failure()
        run: |
          mvn spotless:apply || echo "Spotless apply failed. Proceeding with the build."
      - name: Commit and Push Spotless Changes
        if: failure()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Apply Spotless formatting"
          git push
      - name: Run All Tests (Ignore Failures)
        run: |
          mvn test -DtestFailureIgnore=true || echo "Tests failed but proceeding with the build."
      - name: Run Clean, Package, Install
        run: |
          mvn clean package install -B
          cp target/original-uml-editor-shaded.jar target/uml-editor.jar
        shell: pwsh

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.java-version }}
          path: target/*.jar

      - name: Determine Release Type
        id: determine_release
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "release_type=release" >> $GITHUB_ENV
            echo "prerelease=false" >> $GITHUB_ENV
          else
            echo "release_type=pre-release" >> $GITHUB_ENV
            echo "prerelease=true" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v1.0.${{ github.run_number }}-${{ matrix.os }}-${{ matrix.java-version }}
          release_name: "Release v1.0.${{ github.run_number }} on ${{ matrix.os }} with GraalVM JDK ${{ matrix.java-version }}"
          draft: false
          prerelease: ${{ env.prerelease }}

      - name: Upload Renamed JAR to Release
        if: always()  # Always runs if create_release succeeds
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/uml-editor.jar
          asset_name: uml-editor-${{ matrix.os }}-${{ matrix.java-version }}.jar
          asset_content_type: application/java-archive

      - name: Copy Renamed JAR to Project Root (Cross-Platform)
        run: |
          node -e "const fs = require('fs'); fs.copyFileSync('target/uml-editor.jar', 'uml-editor.jar'); console.log('Updated uml-editor.jar in the project root directory.');"
