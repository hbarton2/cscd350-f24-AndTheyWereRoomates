name: Java Continuous Integration with Maven (GraalVM)

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        java-version: [ '21.0.5' ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up GraalVM JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'graalvm'
          cache: maven

      - name: Verify Code Style with Spotless
        run: |
          mvn spotless:check || echo "Spotless check failed. Please run 'mvn spotless:apply' locally to fix."

      - name: Run All Tests (Ignore Failures)
        run: |
          mvn test -DtestFailureIgnore=true || echo "Tests failed but proceeding with the build."

      - name: Run Clean, Package, Install
        run: |
          mvn clean package install -B
          cp target/original-uml-editor-shaded.jar target/uml-editor-${{ matrix.os }}.jar
          zip -r source-${{ matrix.os }}.zip .
          tar -czf source-${{ matrix.os }}.tar.gz .
        shell: bash

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            target/*.jar
            source-${{ matrix.os }}.zip
            source-${{ matrix.os }}.tar.gz

  prerelease:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: artifacts/

      - name: Create Pre-Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create \
            "v4.4.${{ github.run_number }}-${{ matrix.os }}" \
            --title "Pre-Release v4.4.${{ github.run_number }} on ${{ matrix.os }}" \
            --notes "Automatically generated pre-release for ${{ matrix.os }}" \
            --prerelease \
            artifacts/uml-editor-${{ matrix.os }}.jar \
            artifacts/source-${{ matrix.os }}.zip \
            artifacts/source-${{ matrix.os }}.tar.gz

  release:
    needs: prerelease
    runs-on: ubuntu-latest

    steps:
      - name: Download All Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: artifacts/

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create \
            "v4.4.${{ github.run_number }}" \
            --title "Release v4.4.${{ github.run_number }} UML Editor" \
            --notes "Automatically generated full release including all platforms." \
            artifacts/*.jar \
            artifacts/*.zip \
            artifacts/*.tar.gz

  check-code-coverage:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up GraalVM JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21.0.5'
          distribution: 'graalvm'

      - name: Generate Code Coverage Report
        run: |
          mvn jacoco:prepare-agent test jacoco:report
        shell: bash

      - name: Verify Code Coverage for Model Classes
        run: |
          COVERAGE=$(xmllint --xpath "string(//package[@name='org.project.Model']/counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml)
          MISSED=$(xmllint --xpath "string(//package[@name='org.project.Model']/counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml)
          TOTAL=$((COVERAGE + MISSED))
          PERCENT=$((COVERAGE * 100 / TOTAL))
          echo "Coverage: $PERCENT%"
          if [ $PERCENT -lt 90 ]; then
            echo "Code coverage is below 90% for org.project.Model. Current: $PERCENT%"
            exit 1
          else
            echo "Code coverage is above 90% for org.project.Model. Current: $PERCENT%"
          fi
